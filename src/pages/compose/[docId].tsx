import Head from 'next/head'
import { NextPage } from 'next'
import { getMarkdownDocByIdAndUser } from '@/lib/firebase/actions/documents'
import { MarkdownDocFromCollection } from '@/types'
import EditorSection from '@/sections/EditorSection'
import { AuthAction, withAuthUser, withAuthUserTokenSSR } from 'next-firebase-auth'
import AppLayout from '@/layout/AppLayout'

export const getServerSideProps = withAuthUserTokenSSR({
  whenUnauthed: AuthAction.REDIRECT_TO_LOGIN
})(async ({ AuthUser, query }) => {
  const userId = AuthUser.id as string
  const { docId } = query
  try {
    const documentData = await getMarkdownDocByIdAndUser(userId, docId as string)

    return {
      props: {
        data: {
          ...documentData,
          docId
        }
      }
    }
  } catch (e) {
    console.error(e)
    return {
      redirect: {
        permanent: false,
        destination: '/'
      },
      props: {}
    }
  }
})

interface IProps {
  data: MarkdownDocFromCollection
}

const DocumentCompose: NextPage<IProps> = ({ data }) => {
  return (
    <>
      <Head>
        <title>{data.title}</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <EditorSection {...data} />
    </>
  )
}

// @ts-expect-error
DocumentCompose.PageLayout = AppLayout

export default withAuthUser({
  whenUnauthedBeforeInit: AuthAction.REDIRECT_TO_LOGIN
})(DocumentCompose as any)
